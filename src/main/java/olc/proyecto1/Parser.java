
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package olc.proyecto1;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\025\000\002\002\004\000\002\002\005\000\002\003" +
    "\003\000\002\003\004\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\005\010\000\002\006\010\000" +
    "\002\007\013\000\002\014\003\000\002\014\005\000\002" +
    "\010\003\000\002\010\005\000\002\011\003\000\002\011" +
    "\003\000\002\012\004\000\002\012\004\000\002\012\004" +
    "\000\002\012\004\000\002\013\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\062\000\004\013\005\001\002\000\004\002\064\001" +
    "\002\000\010\004\012\005\010\006\007\001\002\000\012" +
    "\004\012\005\010\006\007\014\062\001\002\000\004\011" +
    "\052\001\002\000\004\007\034\001\002\000\012\004\ufffd" +
    "\005\ufffd\006\ufffd\014\ufffd\001\002\000\004\007\016\001" +
    "\002\000\012\004\uffff\005\uffff\006\uffff\014\uffff\001\002" +
    "\000\012\004\ufffc\005\ufffc\006\ufffc\014\ufffc\001\002\000" +
    "\012\004\ufffb\005\ufffb\006\ufffb\014\ufffb\001\002\000\004" +
    "\020\017\001\002\000\004\015\020\001\002\000\006\020" +
    "\022\021\021\001\002\000\012\010\ufff2\014\ufff2\016\ufff2" +
    "\017\ufff2\001\002\000\012\010\ufff3\014\ufff3\016\ufff3\017" +
    "\ufff3\001\002\000\010\010\ufff5\016\027\017\030\001\002" +
    "\000\004\010\026\001\002\000\004\010\ufff7\001\002\000" +
    "\012\004\ufffa\005\ufffa\006\ufffa\014\ufffa\001\002\000\006" +
    "\020\022\021\021\001\002\000\006\020\022\021\021\001" +
    "\002\000\004\010\ufff6\001\002\000\010\010\ufff5\014\ufff5" +
    "\016\027\001\002\000\006\010\ufff4\014\ufff4\001\002\000" +
    "\004\020\035\001\002\000\004\015\036\001\002\000\012" +
    "\022\041\023\043\024\040\025\042\001\002\000\004\010" +
    "\051\001\002\000\004\020\045\001\002\000\004\020\045" +
    "\001\002\000\004\020\045\001\002\000\004\020\045\001" +
    "\002\000\004\010\ufff0\001\002\000\004\010\uffed\001\002" +
    "\000\004\010\uffee\001\002\000\004\010\ufff1\001\002\000" +
    "\004\010\uffef\001\002\000\012\004\ufff9\005\ufff9\006\ufff9" +
    "\014\ufff9\001\002\000\004\013\053\001\002\000\006\020" +
    "\022\021\021\001\002\000\004\014\055\001\002\000\004" +
    "\016\056\001\002\000\004\020\057\001\002\000\004\012" +
    "\060\001\002\000\004\010\061\001\002\000\012\004\ufff8" +
    "\005\ufff8\006\ufff8\014\ufff8\001\002\000\004\002\000\001" +
    "\002\000\012\004\ufffe\005\ufffe\006\ufffe\014\ufffe\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\062\000\004\002\003\001\001\000\002\001\001\000" +
    "\014\003\005\004\012\005\010\006\013\007\014\001\001" +
    "\000\012\004\062\005\010\006\013\007\014\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\010\024" +
    "\011\022\014\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\010\032\011\031\001\001\000" +
    "\004\011\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\036\001\001\000\002\001\001\000\004\013\047" +
    "\001\001\000\004\013\046\001\001\000\004\013\045\001" +
    "\001\000\004\013\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\010\053" +
    "\011\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  private Map<String, Set<String>> conjuntos = new HashMap<>();
  private Map<String, String> operaciones = new HashMap<>();

  private void agregarConjunto(String nombre, Set<String> elementos) {
    conjuntos.put(nombre, elementos);
    System.out.println("Conjunto definido: " + nombre + " con elementos: " + elementos);
  }

  private void agregarOperacion(String nombre, String operacion) {
    operaciones.put(nombre, operacion);
    System.out.println("Operación definida: " + nombre + " con operación: " + operacion);
  }

  private void evaluarConjunto(Set<String> conjunto, String operacion) {
    System.out.println("Evaluando operación " + operacion + " en conjunto: " + conjunto);
  }

  public void syntax_error(Symbol s) {
    System.err.println("Syntax error at line " + s.left + ", column " + s.right);
  }

//  public final Class getSymbolContainer() {
//    return sym.class;
//  }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;
  private Object $$, $1, $2, $3, $4, $5, $6, $7;
  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= OPEN_BRACE statement_list CLOSE_BRACE 
            {
              Object RESULT =null;
		 System.out.println("Parsing completed successfully."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // statement_list ::= statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statement_list ::= statement_list statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement ::= conjunto_def 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= opera_def 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= eval_def 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // conjunto_def ::= CONJ COLON IDENTIFIER ARROW symbol_range_or_list SEMICOLON 
            {
              Object RESULT =null;
		 
              String nombre = (String)$3;
              Set<String> elementos = (Set<String>)$5;
              if (nombre != null && elementos != null) {
                  agregarConjunto(nombre, elementos); 
              } else {
                  System.err.println("Error: Nombre o elementos nulos en conjunto_def.");
              }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conjunto_def",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // opera_def ::= OPERA COLON IDENTIFIER ARROW operation SEMICOLON 
            {
              Object RESULT =null;
		
           String nombre = (String)$3;
           String operacion = (String)$5;
           if (nombre != null && operacion != null) {
               agregarOperacion(nombre, operacion); 
           } else {
               System.err.println("Error: Nombre o operación nulos en opera_def.");
           }
         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opera_def",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // eval_def ::= EVALUAR OPEN_PAREN OPEN_BRACE symbol_list CLOSE_BRACE COMMA IDENTIFIER CLOSE_PAREN SEMICOLON 
            {
              Object RESULT =null;
		
          String operationName = (String)$7;
          Set<String> symbols = (Set<String>)$4;
          if (operationName != null && symbols != null) {
              if (operaciones.containsKey(operationName)) {
                  evaluarConjunto(symbols, operationName);
              } else {
                  System.err.println("Error: Operación no definida " + operationName);
              }
          } else {
              System.err.println("Error: operationName o symbols nulos en eval_def.");
          }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("eval_def",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // symbol_range_or_list ::= symbol_list 
            {
              Object RESULT =null;
		 
             if ($1 != null) {
                 RESULT = $1; 
             } else {
                 System.err.println("Error: symbol_list es nulo en symbol_range_or_list.");
                 RESULT = new HashSet<>();
             } 
           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("symbol_range_or_list",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // symbol_range_or_list ::= symbol RANGE symbol 
            {
              Object RESULT =null;
		 
             if ($1 != null && $3 != null) {
                 Set<String> set = new HashSet<>();
                 char start = ((String)$1).charAt(0);
                 char end = ((String)$3).charAt(0);
                 for (char c = start; c <= end; c++) {
                     set.add(String.valueOf(c));
                 }
                 RESULT = set;
             } else {
                 System.err.println("Error: Uno de los símbolos es nulo en symbol_range_or_list.");
                 RESULT = new HashSet<>();
             }
           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("symbol_range_or_list",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // symbol_list ::= symbol 
            {
              Object RESULT =null;
		
             Set<String> set = new HashSet<>();
             if ($1 != null) {
                 set.add((String)$1);
                 RESULT = set;
             } else {
                 System.err.println("Error: Symbol $1 is null in symbol_list production.");
                 RESULT = new HashSet<>();
             }
           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("symbol_list",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // symbol_list ::= symbol COMMA symbol_list 
            {
              Object RESULT =null;
		
             Set<String> set = (Set<String>)$3;
             if ($1 != null) {
                 set.add((String)$1);
                 RESULT = set;
             } else {
                 System.err.println("Error: Symbol $1 is null in symbol_list production.");
                 RESULT = set; // Preserve previous set even if $1 is null
             }
           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("symbol_list",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // symbol ::= IDENTIFIER 
            {
              Object RESULT =null;
		 
          RESULT = (String)$1; 
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("symbol",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // symbol ::= NUMBER 
            {
              Object RESULT =null;
		 
          RESULT = String.valueOf($1); 
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("symbol",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // operation ::= AND_OP conjunto 
            {
              Object RESULT =null;
		 
           if ($1 != null && $2 != null) {
               RESULT = (String)$1 + " " + (String)$2; 
           } else {
               System.err.println("Error: One of the symbols is null in operation production.");
               RESULT = "";
           }
         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operation",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // operation ::= UNION_OP conjunto 
            {
              Object RESULT =null;
		 
           if ($1 != null && $2 != null) {
               RESULT = (String)$1 + " " + (String)$2; 
           } else {
               System.err.println("Error: One of the symbols is null in operation production.");
               RESULT = "";
           }
         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operation",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // operation ::= XOR_OP conjunto 
            {
              Object RESULT =null;
		 
           if ($1 != null && $2 != null) {
               RESULT = (String)$1 + " " + (String)$2; 
           } else {
               System.err.println("Error: One of the symbols is null in operation production.");
               RESULT = "";
           }
         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operation",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // operation ::= DIFF_OP conjunto 
            {
              Object RESULT =null;
		 
           if ($1 != null && $2 != null) {
               RESULT = (String)$1 + " " + (String)$2; 
           } else {
               System.err.println("Error: One of the symbols is null in operation production.");
               RESULT = "";
           }
         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operation",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // conjunto ::= IDENTIFIER 
            {
              Object RESULT =null;
		 
          RESULT = (String)$1; 
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conjunto",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
