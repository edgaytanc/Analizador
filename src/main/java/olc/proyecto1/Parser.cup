parser code {:
  package olc.proyecto1;
  import java_cup.runtime.Symbol;
  import java.util.Map;
  import java.util.HashMap;
  import java.util.Set;
  import java.util.HashSet;

  public void syntax_error(Symbol s) {
    System.err.println("Syntax error at line " + s.left + ", column " + s.right);
  }

  private Map<String, Set<String>> conjuntos = new HashMap<>();
  private Map<String, String> operaciones = new HashMap<>();

  private void agregarConjunto(String nombre, Set<String> elementos) {
    conjuntos.put(nombre, elementos);
    System.out.println("Conjunto definido: " + nombre + " con elementos: " + elementos);
  }

  private void agregarOperacion(String nombre, String operacion) {
    operaciones.put(nombre, operacion);
    System.out.println("Operaci贸n definida: " + nombre + " con operaci贸n: " + operacion);
  }

  private void evaluarConjunto(Set<String> conjunto, String operacion) {
    System.out.println("Evaluando operaci贸n " + operacion + " en conjunto: " + conjunto);
  }
:};

init with {:
  System.out.println("Parser initialized.");
:};

terminal String IDENTIFIER, SYMBOL, OPERATION;
terminal CONJ, OPERA, EVALUAR, CLOSE_BRACE, OPEN_BRACE, ARROW, COMMA;
terminal NUMBER, NOT;

non terminal program, statement_list, statement;
non terminal conjunto_def, opera_def, eval_def;
non terminal Set<String> symbol_list;
non terminal String operation, conjunto;

start with program;

program ::=
  OPEN_BRACE statement_list CLOSE_BRACE
  {: System.out.println("Parsing completed successfully."); :}
  ;

statement_list ::= 
  statement 
  | statement_list statement
  ;

statement ::=
  conjunto_def
  | opera_def
  | eval_def
  ;

conjunto_def ::= 
  CONJ IDENTIFIER ARROW symbol_list
  {: 
    String nombre = (String)$2;
    Set<String> elementos = (Set<String>)$4;
    agregarConjunto(nombre, elementos); 
    $$ = nombre;
  :}
  ;

opera_def ::= 
  OPERA IDENTIFIER ARROW operation
  {: 
    String nombre = (String)$2;
    String operacion = (String)$4;
    agregarOperacion(nombre, operacion); 
    $$ = nombre;
  :}
  ;

eval_def ::= 
  EVALUAR OPEN_BRACE symbol_list CLOSE_BRACE COMMA IDENTIFIER
  {: 
    String operationName = (String)$6;
    Set<String> symbols = (Set<String>)$3;
    if (operaciones.containsKey(operationName)) {
      evaluarConjunto(symbols, operationName);
    } else {
      System.err.println("Error: Operaci贸n no definida " + operationName);
    }
    $$ = operationName;
  :}
  ;

symbol_list ::= 
  SYMBOL
  {: 
    Set<String> set = new HashSet<>();
    set.add((String)$1);
    $$ = set;
  :}
  | SYMBOL COMMA symbol_list
  {: 
    Set<String> set = (Set<String>)$3;
    set.add((String)$1);
    $$ = set;
  :}
  ;

operation ::= 
  OPERATION conjunto
  {: 
    $$ = (String)$1 + " " + (String)$2; 
  :}
  | OPERATION conjunto operation
  {: 
    $$ = (String)$1 + " " + (String)$2 + " " + (String)$3; 
  :}
  ;

conjunto ::= 
  IDENTIFIER
  {: 
    $$ = (String)$1; 
  :}
  ;
